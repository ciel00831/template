<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<mapper namespace="com.tiny.dao.MemberDao">
	<resultMap id="result" type="member">
		<result property="providerUserId" column="providerUserId" />
		<result property="email" column="email" />
		<result property="name" column="name" />
		<result property="gender" column="gender" />
		<result property="point" column="point" />
		<result property="countDocument" column="contDocument" />
		<result property="countToComment" column="countToComment" />
		<result property="countToBeCommented" column="countToBeCommented" />
		<result property="countToLike" column="countToLike" />
		<result property="countToBeLiked" column="countToBeLiked" />
		<result property="countToDislike" column="countToDislike" />
		<result property="countToBeDisliked" column="countToBeDisliked" />
		<result property="countToShare" column="countToShare" />
		<result property="countToBeShared" column="countToBeShared" />
		<result property="locale" column="locale" />
		<result property="isAdmin" column="isAdmin" />
		<result property="regDate" column="regDate" />
		<result property="lastLogin" column="lastLogin" />
	</resultMap>
	
	<insert id="save" parameterType="member">
		INSERT
		INTO member
				(providerUserId,
				email,
				name,
				gender,
				point,
				countDocument,
				countToComment,
				countToBeCommented,
				countToLike,
				countToBeLiked,
				countToDislike,
				countToBeDisliked,
				countToShare,
				countToBeShared,
				locale,
				isAdmin,
				regDate,
				lastLogin)
		VALUES (#{providerUserId},
				#{email},
				#{name},
				#{gender},
				#{point},
				#{countDocument},
				#{countToComment},
				#{countToBeCommented},
				#{countToLike},
				#{countToBeLiked},
				#{countToDislike},
				#{countToBeDisliked},
				#{countToShare},
				#{countToBeShared},
				#{locale},
				#{isAdmin},
				NOW(),
				NOW());
	</insert>
	
	<select id="getAll" resultMap="result">
		SELECT *
		FROM member;
	</select>
	
	<select id="get" resultType="member">
		SELECT *
		FROM member
		WHERE providerUserId = #{value}
	</select>
	
	<select id="count" resultType="int">
		SELECT COUNT(*)
		FROM member;
	</select>
	
	<update id="update" parameterType="member">
  		UPDATE member
  		SET
			email = #{email},
			name = #{name},
			gender = #{gender},
			point = #{point},
			countDocument = #{countDocument},
			countToComment = #{countToComment},
			countToBeCommented = #{countToBeCommented},
			countToLike = #{countToLike},
			countToBeLiked = #{countToBeLiked},
			countToDislike = #{countToDislike},
			countToBeDisliked = #{countToBeDisliked},
			countToShare = #{countToShare},
			countToBeShared = #{countToBeShared},
			locale = #{locale},
			isAdmin = #{isAdmin},
			lastLogin = NOW()
  		where providerUserId = #{providerUserId};
	</update>
	
	<update id="updateName" parameterType="map">
  		UPDATE member
  		SET
			name = #{name}
  		where providerUserId = #{providerUserId};
	</update>
	
	<update id="updateLastLoginTime" parameterType="String">
  		UPDATE member
  		SET
			lastLogin = NOW()
  		where providerUserId = (
	  		SELECT providerUserId FROM UserConnection WHERE userId = #{userId}
  		);
	</update>
	
	<update id="increaseCountToShare" parameterType="String">
  		UPDATE member
  		SET
			countToShare = countToShare + 1 
  		where providerUserId = (
	  		SELECT providerUserId FROM UserConnection WHERE userId = #{userId}
  		);
	</update>
	
	<update id="increaseCountToBeShared" parameterType="String">
  		UPDATE member
  		SET
			countToBeShared = countToBeShared + 1 
  		where providerUserId = #{providerUserId};
	</update>
	
	<update id="increaseCountToLike" parameterType="String">
  		UPDATE member
  		SET
			countToLike = countToLike + 1 
  		where providerUserId = (
	  		SELECT providerUserId FROM UserConnection WHERE userId = #{userId}
  		);
	</update>
	
	<update id="increaseCountToBeLiked" parameterType="String">
  		UPDATE member
  		SET
			countToBeLiked = countToBeLiked + 1 
  		where providerUserId = #{providerUserId};
	</update>
	
	<update id="increaseCountToDislike" parameterType="String">
  		UPDATE member
  		SET
			countToDislike = countToDislike + 1 
  		where providerUserId = (
	  		SELECT providerUserId FROM UserConnection WHERE userId = #{userId}
  		);
	</update>
	
	<update id="increaseCountToBeDisliked" parameterType="String">
  		UPDATE member
  		SET
			countToBeDisliked = countToBeDisliked + 1 
  		where providerUserId = #{providerUserId};
	</update>
	
	<update id="increaseCountToComment" parameterType="String">
  		UPDATE member
  		SET
			countToComment = countToComment + 1 
  		where providerUserId = (
	  		SELECT providerUserId FROM UserConnection WHERE userId = #{userId}
  		);
	</update>
	
	<update id="increaseCountToBeCommented" parameterType="String">
  		UPDATE member
  		SET
			countToBeCommented = countToBeCommented + 1 
  		where providerUserId = #{providerUserId};
	</update>
	
	<delete id="delete" parameterType="String">
		DELETE
		FROM member
		WHERE providerUserId = #{providerUserId};
	</delete>
</mapper>